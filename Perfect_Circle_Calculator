import cv2
import numpy as np

# Global variables
drawing = False
points = []
color = (0, 0, 0)  # Default line color
thickness = 2  # Default line thickness
img = np.ones((500, 500, 3), dtype=np.uint8) * 255  # Blank canvas

# Mouse callback function
def draw_freehand(event, x, y, flags, param):
    global drawing, points, img

    if event == cv2.EVENT_LBUTTONDOWN:
        drawing = True
        points = [(x, y)]
    elif event == cv2.EVENT_MOUSEMOVE:
        if drawing:
            points.append((x, y))
            cv2.line(img, points[-2], (x, y), color, thickness)
            cv2.imshow("Draw Freehand", img)
    elif event == cv2.EVENT_LBUTTONUP:
        drawing = False
        points.append((x, y))
        cv2.line(img, points[-2], (x, y), color, thickness)
        print("Drawing complete. Analyzing shape...")
        perfection_score = analyze_shape(points)
        display_results(perfection_score)

# Analyze the shape and calculate "circle-ness"
def analyze_shape(points):
    points_array = np.array(points, dtype=np.int32)
    hull = cv2.convexHull(points_array)
    (x, y), radius = cv2.minEnclosingCircle(hull)
    center = (int(x), int(y))
    radius = int(radius)

    # Draw the enclosing circle
    cv2.circle(img, center, radius, (255, 0, 0), 2)

    distances = [np.linalg.norm(np.array(p) - np.array(center)) for p in points]
    avg_distance = np.mean(distances)
    std_dev = np.std(distances)
    deviation_ratio = std_dev / avg_distance if avg_distance != 0 else 0
    perfection_score = max(0, 100 - deviation_ratio * 500)

    print(f"Circle-ness Perfection Score: {perfection_score:.2f}%")
    if perfection_score == 100:
        print("Perfect circle!")
    else:
        print(f"The drawn shape is {100 - perfection_score:.2f}% imperfect.")
    
    return perfection_score

# Display the results on the canvas
def display_results(perfection_score):
    result_text = f"Circle-ness: {perfection_score:.1f}%"
    color = (0, 255, 0) if perfection_score > 80 else (0, 0, 255)  # Green for good, Red for poor
    cv2.putText(img, result_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, color, 2)
    cv2.imshow("Draw Freehand", img)

# Save the drawing
def save_drawing():
    cv2.imwrite("drawing.png", img)
    print("Drawing saved as 'drawing.png'.")

# Load a saved drawing
def load_drawing():
    global img
    try:
        img = cv2.imread("drawing.png")
        if img is None:
            raise FileNotFoundError("Image file not found.")
        print("Drawing loaded from 'drawing.png'.")
        cv2.imshow("Draw Freehand", img)
    except Exception as e:
        print(f"Failed to load drawing: {e}")

# Reset the canvas
def reset_canvas():
    global img
    img = np.ones((500, 500, 3), dtype=np.uint8) * 255
    print("Canvas reset.")
    cv2.imshow("Draw Freehand", img)

# Keyboard controls
def keyboard_controls(key):
    global color, thickness
    if key == ord('s'):
        save_drawing()
    elif key == ord('l'):
        load_drawing()
    elif key == ord('r'):
        reset_canvas()
    elif key == ord('c'):
        color = (0, 255, 0) if color == (0, 0, 0) else (0, 0, 0)
        print(f"Color changed to: {'Green' if color == (0, 255, 0) else 'Black'}.")
    elif key == ord('+'):
        thickness += 1
        print(f"Line thickness increased to: {thickness}.")
    elif key == ord('-'):
        thickness = max(1, thickness - 1)
        print(f"Line thickness decreased to: {thickness}.")

# Main application
cv2.imshow("Draw Freehand", img)
cv2.setMouseCallback("Draw Freehand", draw_freehand)
print("Instructions:")
print("- Draw freely with the left mouse button.")
print("- Press 's' to save the drawing.")
print("- Press 'l' to load a saved drawing.")
print("- Press 'r' to reset the canvas.")
print("- Press 'c' to toggle color between black and green.")
print("- Press '+' or '-' to adjust line thickness.")

while True:
    key = cv2.waitKey(1) & 0xFF
    if key == 27:  # ESC key to exit
        break
    keyboard_controls(key)

cv2.destroyAllWindows()
